from scitools.std import *

class ODESolver:
    def __init__(self, f, dt):
        self.f = lambda u, t: asarray(f(u, t), float)
        self.dt = dt

    def advance(self):
        raise NotImplementedError

    def set_initial_condition(self, u0, t0=0):
        self.u = []    
        self.t = []    
        
        self.u.append(asarray(u0, float))
        self.t.append(float(t0))
        self.k = 0
      

    def solve(self, T):
        self.k = 0
        tnew = 0
        while tnew <= T:
            unew = self.advance()
            self.u.append(unew)
            tnew = self.t[-1] + self.dt
            self.t.append(tnew)
            self.k += 1
        return array(self.u), array(self.t)

class RungeKutta4(ODESolver):
    def advance(self):
        u, dt, f, k, t = \
           self.u, self.dt, self.f, self.k, self.t[-1]
        dt2 = dt/2.0
        K1 = dt*f(u[k], t)
        K2 = dt*f(u[k] + 0.5*K1, t + dt2)
        K3 = dt*f(u[k] + 0.5*K2, t + dt2)
        K4 = dt*f(u[k] + K3, t + dt)
        unew = u[k] + (1/6.0)*(K1 + 2*K2 + 2*K3 + K4)
        return unew

class Decay2:
    def __init__(self, tau_A, tau_B):
        self.tau_A, self.tau_B = tau_A, tau_B

    def __call__(self, u, t):
        tau_A, tau_B = self.tau_A, self.tau_B
        u_A = u[1]/float(tau_B) - u[0]/float(tau_A)
        u_B = u[0]/float(tau_A) - u[1]/float(tau_B)
        return [u_A, u_B]

u_init = [1, 1]; T = 30; dt = 1./6; tau_A = 8; tau_B = 40
f = Decay2(tau_A, tau_B)

method = RungeKutta4(f, dt)
method.set_initial_condition(u_init) 
u, t = method.solve(T)
u_A = u[:, 0]; u_B = u[:, 1]
print method.__class__.__name__, ':\n', u
plot(t, u_A, t, u_B,
     hold='on', legend=('u_A', 'u_B'),
     title=('Solved the two coupled ODEs problems using %s method' \
         % (method.__class__.__name__)))
